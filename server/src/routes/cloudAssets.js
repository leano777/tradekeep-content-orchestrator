const express = require('express');\nconst { query, validationResult } = require('express-validator');\nconst cloudStorage = require('../services/cloudStorage');\nconst contentIndexIntegration = require('../services/contentIndexIntegration');\nconst { restrictTo, logActivity } = require('../middleware/auth');\nconst { AppError, catchAsync } = require('../middleware/errorHandler');\nconst { PrismaClient } = require('@prisma/client');\n\nconst router = express.Router();\nconst prisma = new PrismaClient();\n\n// Google Drive Authentication\nrouter.get('/google-drive/auth-url', restrictTo('ADMIN', 'MANAGER'), catchAsync(async (req, res) => {\n  const authUrl = await cloudStorage.getGoogleDriveAuthUrl();\n  \n  res.status(200).json({\n    status: 'success',\n    data: {\n      authUrl,\n      provider: 'googledrive'\n    }\n  });\n}));\n\nrouter.post('/google-drive/callback', restrictTo('ADMIN', 'MANAGER'), catchAsync(async (req, res) => {\n  const { code } = req.body;\n  \n  if (!code) {\n    return next(new AppError('Authorization code is required', 400));\n  }\n  \n  const tokens = await cloudStorage.handleGoogleDriveCallback(code);\n  \n  // Store tokens securely (you might want to encrypt these)\n  await prisma.userPreference.upsert({\n    where: {\n      userId_key: {\n        userId: req.user.id,\n        key: 'googledrive_tokens'\n      }\n    },\n    update: {\n      value: tokens\n    },\n    create: {\n      userId: req.user.id,\n      key: 'googledrive_tokens',\n      value: tokens\n    }\n  });\n  \n  await logActivity(req.user.id, 'GOOGLE_DRIVE_CONNECTED', 'integration', null, null, req);\n  \n  res.status(200).json({\n    status: 'success',\n    message: 'Google Drive connected successfully'\n  });\n}));\n\n// OneDrive Authentication\nrouter.get('/onedrive/auth-url', restrictTo('ADMIN', 'MANAGER'), catchAsync(async (req, res) => {\n  const authUrl = await cloudStorage.getOneDriveAuthUrl();\n  \n  res.status(200).json({\n    status: 'success',\n    data: {\n      authUrl,\n      provider: 'onedrive'\n    }\n  });\n}));\n\nrouter.post('/onedrive/callback', restrictTo('ADMIN', 'MANAGER'), catchAsync(async (req, res) => {\n  const { code } = req.body;\n  \n  if (!code) {\n    return next(new AppError('Authorization code is required', 400));\n  }\n  \n  const tokens = await cloudStorage.handleOneDriveCallback(code);\n  \n  // Store tokens securely\n  await prisma.userPreference.upsert({\n    where: {\n      userId_key: {\n        userId: req.user.id,\n        key: 'onedrive_tokens'\n      }\n    },\n    update: {\n      value: tokens\n    },\n    create: {\n      userId: req.user.id,\n      key: 'onedrive_tokens',\n      value: tokens\n    }\n  });\n  \n  await logActivity(req.user.id, 'ONEDRIVE_CONNECTED', 'integration', null, null, req);\n  \n  res.status(200).json({\n    status: 'success',\n    message: 'OneDrive connected successfully'\n  });\n}));\n\n// List cloud files\nrouter.get('/files', [\n  query('provider').optional().isIn(['googledrive', 'onedrive']),\n  query('folderId').optional().isString(),\n  query('fileTypes').optional().isString(),\n  query('search').optional().isString(),\n  query('page').optional().isInt({ min: 1 }).toInt(),\n  query('limit').optional().isInt({ min: 1, max: 100 }).toInt()\n], catchAsync(async (req, res, next) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      status: 'fail',\n      errors: errors.array()\n    });\n  }\n  \n  const {\n    provider,\n    folderId,\n    fileTypes,\n    search,\n    page = 1,\n    limit = 50\n  } = req.query;\n  \n  let results = [];\n  \n  try {\n    // Initialize cloud storage clients with user tokens\n    await initializeUserCloudStorage(req.user.id);\n    \n    const options = {\n      folderId,\n      fileTypes: fileTypes ? fileTypes.split(',') : null,\n      search,\n      pageSize: limit,\n      skip: (page - 1) * limit\n    };\n    \n    if (!provider || provider === 'googledrive') {\n      try {\n        const googleResults = await cloudStorage.listGoogleDriveFiles(options);\n        results.push(...googleResults.files.map(file => ({ ...file, provider: 'googledrive' })));\n      } catch (error) {\n        console.error('Google Drive error:', error.message);\n      }\n    }\n    \n    if (!provider || provider === 'onedrive') {\n      try {\n        const onedriveResults = await cloudStorage.listOneDriveFiles(options);\n        results.push(...onedriveResults.files.map(file => ({ ...file, provider: 'onedrive' })));\n      } catch (error) {\n        console.error('OneDrive error:', error.message);\n      }\n    }\n    \n    // Sort by modification date (newest first)\n    results.sort((a, b) => new Date(b.modifiedAt) - new Date(a.modifiedAt));\n    \n    res.status(200).json({\n      status: 'success',\n      results: results.length,\n      data: {\n        files: results,\n        pagination: {\n          page,\n          limit,\n          total: results.length\n        }\n      }\n    });\n  } catch (error) {\n    next(error);\n  }\n}));\n\n// Get cloud folders\nrouter.get('/folders', [\n  query('provider').optional().isIn(['googledrive', 'onedrive'])\n], catchAsync(async (req, res, next) => {\n  const { provider } = req.query;\n  let folders = [];\n  \n  try {\n    await initializeUserCloudStorage(req.user.id);\n    \n    if (!provider || provider === 'googledrive') {\n      try {\n        const googleFolders = await cloudStorage.getGoogleDriveFolders();\n        folders.push(...googleFolders);\n      } catch (error) {\n        console.error('Google Drive folders error:', error.message);\n      }\n    }\n    \n    if (!provider || provider === 'onedrive') {\n      try {\n        const onedriveFolders = await cloudStorage.getOneDriveFolders();\n        folders.push(...onedriveFolders);\n      } catch (error) {\n        console.error('OneDrive folders error:', error.message);\n      }\n    }\n    \n    res.status(200).json({\n      status: 'success',\n      data: {\n        folders\n      }\n    });\n  } catch (error) {\n    next(error);\n  }\n}));\n\n// Search files across all connected cloud storage\nrouter.get('/search', [\n  query('q').isString().isLength({ min: 1 }),\n  query('fileTypes').optional().isString(),\n  query('limit').optional().isInt({ min: 1, max: 100 }).toInt()\n], catchAsync(async (req, res, next) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      status: 'fail',\n      errors: errors.array()\n    });\n  }\n  \n  const { q, fileTypes, limit = 50 } = req.query;\n  \n  try {\n    await initializeUserCloudStorage(req.user.id);\n    \n    const options = {\n      fileTypes: fileTypes ? fileTypes.split(',') : null,\n      pageSize: limit\n    };\n    \n    const results = await cloudStorage.searchFiles(q, options);\n    \n    await logActivity(req.user.id, 'CLOUD_SEARCH', 'search', null, { query: q, results: results.length }, req);\n    \n    res.status(200).json({\n      status: 'success',\n      results: results.length,\n      data: {\n        files: results,\n        query: q\n      }\n    });\n  } catch (error) {\n    next(error);\n  }\n}));\n\n// Get connection status\nrouter.get('/status', catchAsync(async (req, res) => {\n  const preferences = await prisma.userPreference.findMany({\n    where: {\n      userId: req.user.id,\n      key: {\n        in: ['googledrive_tokens', 'onedrive_tokens']\n      }\n    }\n  });\n  \n  const status = {\n    googledrive: false,\n    onedrive: false\n  };\n  \n  preferences.forEach(pref => {\n    if (pref.key === 'googledrive_tokens') {\n      status.googledrive = true;\n    }\n    if (pref.key === 'onedrive_tokens') {\n      status.onedrive = true;\n    }\n  });\n  \n  res.status(200).json({\n    status: 'success',\n    data: {\n      connections: status\n    }\n  });\n}));\n\n// Get unified assets (local + cloud)\nrouter.get('/unified', [\n  query('category').optional().isString(),\n  query('type').optional().isString(),\n  query('fileTypes').optional().isString(),\n  query('search').optional().isString(),\n  query('page').optional().isInt({ min: 1 }).toInt(),\n  query('limit').optional().isInt({ min: 1, max: 100 }).toInt()\n], catchAsync(async (req, res) => {\n  const {\n    category,\n    type,\n    fileTypes,\n    search,\n    page = 1,\n    limit = 50\n  } = req.query;\n  \n  const options = {\n    category,\n    type,\n    fileTypes: fileTypes ? fileTypes.split(',') : null,\n    search,\n    page,\n    limit\n  };\n  \n  const results = await contentIndexIntegration.getUnifiedAssets(req.user.id, options);\n  \n  res.status(200).json({\n    status: 'success',\n    data: {\n      local: results.local,\n      cloud: results.cloud,\n      combined: results.combined,\n      sources: {\n        local: results.local.length,\n        cloud: results.cloud.length,\n        total: results.combined.length\n      }\n    }\n  });\n}));\n\n// Get asset statistics\nrouter.get('/statistics', catchAsync(async (req, res) => {\n  const stats = await contentIndexIntegration.getAssetStatistics(req.user.id);\n  \n  res.status(200).json({\n    status: 'success',\n    data: {\n      statistics: stats\n    }\n  });\n}));\n\n// Refresh local content index\nrouter.post('/refresh-index', restrictTo('ADMIN', 'MANAGER'), catchAsync(async (req, res) => {\n  await contentIndexIntegration.refreshContentIndex();\n  \n  await logActivity(req.user.id, 'CONTENT_INDEX_REFRESHED', 'system', null, null, req);\n  \n  res.status(200).json({\n    status: 'success',\n    message: 'Content index refreshed successfully'\n  });\n}));\n\n// Disconnect cloud storage\nrouter.delete('/:provider/disconnect', [\n  query('provider').isIn(['googledrive', 'onedrive'])\n], restrictTo('ADMIN', 'MANAGER'), catchAsync(async (req, res, next) => {\n  const { provider } = req.params;\n  const tokenKey = provider === 'googledrive' ? 'googledrive_tokens' : 'onedrive_tokens';\n  \n  await prisma.userPreference.deleteMany({\n    where: {\n      userId: req.user.id,\n      key: tokenKey\n    }\n  });\n  \n  await logActivity(req.user.id, 'CLOUD_STORAGE_DISCONNECTED', 'integration', null, { provider }, req);\n  \n  res.status(200).json({\n    status: 'success',\n    message: `${provider} disconnected successfully`\n  });\n}));\n\n// Helper function to initialize cloud storage with user tokens\nasync function initializeUserCloudStorage(userId) {\n  const preferences = await prisma.userPreference.findMany({\n    where: {\n      userId,\n      key: {\n        in: ['googledrive_tokens', 'onedrive_tokens']\n      }\n    }\n  });\n  \n  for (const pref of preferences) {\n    if (pref.key === 'googledrive_tokens') {\n      await cloudStorage.initializeGoogleDrive(pref.value);\n    }\n    if (pref.key === 'onedrive_tokens') {\n      await cloudStorage.initializeOneDrive(pref.value.access_token);\n    }\n  }\n}\n\nmodule.exports = router;