const { google } = require('googleapis');\nconst { Client } = require('@microsoft/microsoft-graph-client');\nconst { AppError } = require('../middleware/errorHandler');\n\nclass CloudStorageService {\n  constructor() {\n    this.googleDriveAuth = null;\n    this.oneDriveClient = null;\n  }\n\n  // Google Drive Integration\n  async initializeGoogleDrive(credentials) {\n    try {\n      this.googleDriveAuth = new google.auth.OAuth2(\n        process.env.GOOGLE_DRIVE_CLIENT_ID,\n        process.env.GOOGLE_DRIVE_CLIENT_SECRET,\n        process.env.GOOGLE_DRIVE_REDIRECT_URI\n      );\n      \n      this.googleDriveAuth.setCredentials(credentials);\n      return true;\n    } catch (error) {\n      throw new AppError('Failed to initialize Google Drive', 500);\n    }\n  }\n\n  async getGoogleDriveAuthUrl() {\n    const auth = new google.auth.OAuth2(\n      process.env.GOOGLE_DRIVE_CLIENT_ID,\n      process.env.GOOGLE_DRIVE_CLIENT_SECRET,\n      process.env.GOOGLE_DRIVE_REDIRECT_URI\n    );\n\n    const scopes = [\n      'https://www.googleapis.com/auth/drive.readonly',\n      'https://www.googleapis.com/auth/drive.file'\n    ];\n\n    return auth.generateAuthUrl({\n      access_type: 'offline',\n      scope: scopes,\n      prompt: 'consent'\n    });\n  }\n\n  async handleGoogleDriveCallback(code) {\n    try {\n      const auth = new google.auth.OAuth2(\n        process.env.GOOGLE_DRIVE_CLIENT_ID,\n        process.env.GOOGLE_DRIVE_CLIENT_SECRET,\n        process.env.GOOGLE_DRIVE_REDIRECT_URI\n      );\n\n      const { tokens } = await auth.getToken(code);\n      return tokens;\n    } catch (error) {\n      throw new AppError('Failed to exchange Google Drive authorization code', 400);\n    }\n  }\n\n  async listGoogleDriveFiles(options = {}) {\n    if (!this.googleDriveAuth) {\n      throw new AppError('Google Drive not authenticated', 401);\n    }\n\n    try {\n      const drive = google.drive({ version: 'v3', auth: this.googleDriveAuth });\n      \n      const query = this.buildGoogleDriveQuery(options);\n      \n      const response = await drive.files.list({\n        q: query,\n        fields: 'nextPageToken, files(id, name, mimeType, size, modifiedTime, thumbnailLink, webViewLink, webContentLink, parents)',\n        pageSize: options.pageSize || 50,\n        pageToken: options.pageToken,\n        orderBy: 'modifiedTime desc'\n      });\n\n      return {\n        files: response.data.files.map(file => this.formatGoogleDriveFile(file)),\n        nextPageToken: response.data.nextPageToken\n      };\n    } catch (error) {\n      throw new AppError('Failed to list Google Drive files', 500);\n    }\n  }\n\n  async getGoogleDriveFolders() {\n    if (!this.googleDriveAuth) {\n      throw new AppError('Google Drive not authenticated', 401);\n    }\n\n    try {\n      const drive = google.drive({ version: 'v3', auth: this.googleDriveAuth });\n      \n      const response = await drive.files.list({\n        q: \"mimeType='application/vnd.google-apps.folder'\",\n        fields: 'files(id, name, parents)',\n        pageSize: 1000\n      });\n\n      return response.data.files.map(folder => ({\n        id: folder.id,\n        name: folder.name,\n        type: 'folder',\n        provider: 'googledrive',\n        parents: folder.parents\n      }));\n    } catch (error) {\n      throw new AppError('Failed to list Google Drive folders', 500);\n    }\n  }\n\n  // OneDrive Integration\n  async initializeOneDrive(accessToken) {\n    try {\n      this.oneDriveClient = Client.init({\n        authProvider: {\n          getAccessToken: async () => accessToken\n        }\n      });\n      return true;\n    } catch (error) {\n      throw new AppError('Failed to initialize OneDrive', 500);\n    }\n  }\n\n  async getOneDriveAuthUrl() {\n    const clientId = process.env.ONEDRIVE_CLIENT_ID;\n    const redirectUri = encodeURIComponent(process.env.ONEDRIVE_REDIRECT_URI);\n    const scopes = encodeURIComponent('https://graph.microsoft.com/Files.Read https://graph.microsoft.com/Files.Read.All');\n    \n    return `https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=${clientId}&response_type=code&redirect_uri=${redirectUri}&scope=${scopes}&response_mode=query`;\n  }\n\n  async handleOneDriveCallback(code) {\n    try {\n      const tokenUrl = 'https://login.microsoftonline.com/common/oauth2/v2.0/token';\n      const params = new URLSearchParams();\n      params.append('client_id', process.env.ONEDRIVE_CLIENT_ID);\n      params.append('client_secret', process.env.ONEDRIVE_CLIENT_SECRET);\n      params.append('code', code);\n      params.append('redirect_uri', process.env.ONEDRIVE_REDIRECT_URI);\n      params.append('grant_type', 'authorization_code');\n\n      const response = await fetch(tokenUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: params\n      });\n\n      if (!response.ok) {\n        throw new Error('Token exchange failed');\n      }\n\n      const tokens = await response.json();\n      return tokens;\n    } catch (error) {\n      throw new AppError('Failed to exchange OneDrive authorization code', 400);\n    }\n  }\n\n  async listOneDriveFiles(options = {}) {\n    if (!this.oneDriveClient) {\n      throw new AppError('OneDrive not authenticated', 401);\n    }\n\n    try {\n      let query = '/me/drive/root/children';\n      \n      if (options.folderId) {\n        query = `/me/drive/items/${options.folderId}/children`;\n      }\n\n      const queryParams = [];\n      if (options.filter) {\n        queryParams.push(`$filter=${options.filter}`);\n      }\n      queryParams.push('$orderby=lastModifiedDateTime desc');\n      queryParams.push(`$top=${options.pageSize || 50}`);\n      if (options.skip) {\n        queryParams.push(`$skip=${options.skip}`);\n      }\n\n      if (queryParams.length > 0) {\n        query += '?' + queryParams.join('&');\n      }\n\n      const response = await this.oneDriveClient.api(query).get();\n      \n      return {\n        files: response.value.map(file => this.formatOneDriveFile(file)),\n        hasMore: response['@odata.nextLink'] ? true : false,\n        nextLink: response['@odata.nextLink']\n      };\n    } catch (error) {\n      throw new AppError('Failed to list OneDrive files', 500);\n    }\n  }\n\n  async getOneDriveFolders() {\n    if (!this.oneDriveClient) {\n      throw new AppError('OneDrive not authenticated', 401);\n    }\n\n    try {\n      const response = await this.oneDriveClient\n        .api('/me/drive/root/children')\n        .filter('folder ne null')\n        .get();\n\n      return response.value.map(folder => ({\n        id: folder.id,\n        name: folder.name,\n        type: 'folder',\n        provider: 'onedrive',\n        itemCount: folder.folder?.childCount || 0\n      }));\n    } catch (error) {\n      throw new AppError('Failed to list OneDrive folders', 500);\n    }\n  }\n\n  // Utility methods\n  buildGoogleDriveQuery(options) {\n    const conditions = [];\n    \n    // Exclude trashed files\n    conditions.push('trashed=false');\n    \n    // Filter by folder\n    if (options.folderId) {\n      conditions.push(`'${options.folderId}' in parents`);\n    }\n    \n    // Filter by file type\n    if (options.mimeType) {\n      if (Array.isArray(options.mimeType)) {\n        const mimeConditions = options.mimeType.map(type => `mimeType='${type}'`).join(' or ');\n        conditions.push(`(${mimeConditions})`);\n      } else {\n        conditions.push(`mimeType='${options.mimeType}'`);\n      }\n    }\n    \n    // Filter by file extension for images/videos\n    if (options.fileTypes) {\n      const extensions = options.fileTypes.map(ext => `name contains '.${ext}'`).join(' or ');\n      conditions.push(`(${extensions})`);\n    }\n    \n    // Search by name\n    if (options.search) {\n      conditions.push(`name contains '${options.search}'`);\n    }\n    \n    return conditions.join(' and ');\n  }\n\n  formatGoogleDriveFile(file) {\n    return {\n      id: file.id,\n      name: file.name,\n      type: this.getFileTypeFromMimeType(file.mimeType),\n      mimeType: file.mimeType,\n      size: parseInt(file.size) || 0,\n      sizeFormatted: this.formatFileSize(parseInt(file.size) || 0),\n      modifiedAt: file.modifiedTime,\n      thumbnailUrl: file.thumbnailLink,\n      webViewUrl: file.webViewLink,\n      downloadUrl: file.webContentLink,\n      provider: 'googledrive',\n      isFolder: file.mimeType === 'application/vnd.google-apps.folder',\n      parents: file.parents\n    };\n  }\n\n  formatOneDriveFile(file) {\n    return {\n      id: file.id,\n      name: file.name,\n      type: file.folder ? 'folder' : this.getFileTypeFromMimeType(file.file?.mimeType),\n      mimeType: file.file?.mimeType,\n      size: file.size || 0,\n      sizeFormatted: this.formatFileSize(file.size || 0),\n      modifiedAt: file.lastModifiedDateTime,\n      thumbnailUrl: file.thumbnails?.[0]?.large?.url,\n      webViewUrl: file.webUrl,\n      downloadUrl: file['@microsoft.graph.downloadUrl'],\n      provider: 'onedrive',\n      isFolder: !!file.folder,\n      itemCount: file.folder?.childCount\n    };\n  }\n\n  getFileTypeFromMimeType(mimeType) {\n    if (!mimeType) return 'file';\n    \n    if (mimeType.startsWith('image/')) return 'image';\n    if (mimeType.startsWith('video/')) return 'video';\n    if (mimeType.startsWith('audio/')) return 'audio';\n    if (mimeType.includes('pdf')) return 'pdf';\n    if (mimeType.includes('document') || mimeType.includes('text')) return 'document';\n    if (mimeType.includes('spreadsheet')) return 'spreadsheet';\n    if (mimeType.includes('presentation')) return 'presentation';\n    \n    return 'file';\n  }\n\n  formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n\n  // Search across both providers\n  async searchFiles(query, options = {}) {\n    const results = [];\n    \n    // Search Google Drive if authenticated\n    if (this.googleDriveAuth) {\n      try {\n        const googleResults = await this.listGoogleDriveFiles({\n          search: query,\n          ...options\n        });\n        results.push(...googleResults.files);\n      } catch (error) {\n        console.error('Google Drive search error:', error);\n      }\n    }\n    \n    // Search OneDrive if authenticated\n    if (this.oneDriveClient) {\n      try {\n        const onedriveResults = await this.listOneDriveFiles({\n          filter: `startswith(name,'${query}') or contains(name,'${query}')`,\n          ...options\n        });\n        results.push(...onedriveResults.files);\n      } catch (error) {\n        console.error('OneDrive search error:', error);\n      }\n    }\n    \n    // Sort by modification date (newest first)\n    return results.sort((a, b) => new Date(b.modifiedAt) - new Date(a.modifiedAt));\n  }\n}\n\nmodule.exports = new CloudStorageService();