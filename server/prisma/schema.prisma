generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("EDITOR")
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  content Content[]
  campaigns Campaign[]
  assets Asset[]
  emailCampaigns EmailCampaign[]
  emailTemplates EmailTemplate[]
  contentTemplates ContentTemplate[]

  @@map("users")
}

model Content {
  id          String    @id @default(cuid())
  title       String
  body        String
  type        String    @default("post")
  status      String    @default("draft")
  pillar      String    @default("internal-os")
  platform    String?
  scheduledAt DateTime?
  publishedAt DateTime?
  
  // Author
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  
  // Relations
  assets      ContentAsset[]
  campaigns   CampaignContent[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("content")
}

model Asset {
  id          String    @id @default(cuid())
  name        String
  url         String
  type        String    @default("image")
  size        Int
  metadata    String?
  
  // Upload info
  uploadedById String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  
  // Relations
  contentAssets ContentAsset[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("assets")
}

model ContentAsset {
  id        String  @id @default(cuid())
  contentId String
  assetId   String
  
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  asset     Asset   @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  @@unique([contentId, assetId])
  @@map("content_assets")
}

model Campaign {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String    @default("draft")
  startDate   DateTime
  endDate     DateTime
  
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  
  // Relations
  content     CampaignContent[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("campaigns")
}

model CampaignContent {
  id         String   @id @default(cuid())
  campaignId String
  contentId  String
  order      Int      @default(0)
  
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  content    Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, contentId])
  @@map("campaign_content")
}

model EmailSubscriber {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String?
  status      String    @default("active") // active, unsubscribed, bounced
  tags        String?   // JSON string of tags
  metadata    String?   // JSON string of additional data
  
  subscribedAt   DateTime  @default(now())
  unsubscribedAt DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  emailsSent     EmailCampaignRecipient[]
  
  @@map("email_subscribers")
}

model EmailCampaign {
  id          String    @id @default(cuid())
  name        String
  subject     String
  content     String    // HTML content
  plainText   String?   // Plain text version
  fromName    String
  fromEmail   String
  replyTo     String?
  
  status      String    @default("draft") // draft, scheduled, sending, sent, failed
  scheduledAt DateTime?
  sentAt      DateTime?
  
  // Stats
  totalRecipients Int      @default(0)
  sentCount       Int      @default(0)
  openCount       Int      @default(0)
  clickCount      Int      @default(0)
  bounceCount     Int      @default(0)
  unsubscribeCount Int     @default(0)
  
  // Metadata
  tags        String?   // JSON string of tags for filtering
  metadata    String?   // JSON string of campaign metadata
  
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  recipients  EmailCampaignRecipient[]
  
  @@map("email_campaigns")
}

model EmailCampaignRecipient {
  id            String    @id @default(cuid())
  campaignId    String
  subscriberId  String
  
  status        String    @default("pending") // pending, sent, opened, clicked, bounced, unsubscribed
  sentAt        DateTime?
  openedAt      DateTime?
  clickedAt     DateTime?
  bouncedAt     DateTime?
  unsubscribedAt DateTime?
  
  // Tracking
  openCount     Int       @default(0)
  clickCount    Int       @default(0)
  
  campaign      EmailCampaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  subscriber    EmailSubscriber  @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([campaignId, subscriberId])
  @@map("email_campaign_recipients")
}

model EmailTemplate {
  id          String    @id @default(cuid())
  name        String
  subject     String
  content     String    // HTML template with variables
  plainText   String?   // Plain text template
  category    String    @default("general") // newsletter, announcement, promotion, etc.
  
  variables   String?   // JSON string of available variables
  thumbnail   String?   // Preview image URL
  
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("email_templates")
}

model ContentTemplate {
  id          String    @id @default(cuid())
  name        String
  description String?
  content     String    // Template content with markdown
  category    String    @default("general") // blog, social, email, newsletter, etc.
  
  variables   String?   // JSON string of template variables
  thumbnail   String?   // Preview image URL
  
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("content_templates")
}