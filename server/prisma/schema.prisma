generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("EDITOR")
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  content Content[]
  campaigns Campaign[]
  assets Asset[]
  emailCampaigns EmailCampaign[]
  emailTemplates EmailTemplate[]
  contentTemplates ContentTemplate[]
  comments Comment[]
  activities Activity[]
  notifications Notification[]
  brandProfiles BrandProfile[]
  brandAssets BrandAsset[]
  brandContentExamples BrandContentExample[]
  userEngagements UserEngagement[]
  approvals Approval[]
  tasks Task[]

  @@map("users")
}

model Content {
  id          String    @id @default(cuid())
  title       String
  body        String
  type        String    @default("post")
  status      String    @default("draft")
  pillar      String    @default("internal-os")
  pillarId    String?   // Reference to ContentPillar
  platform    String?
  scheduledAt DateTime?
  publishedAt DateTime?
  
  // Author
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  
  // Relations
  assets      ContentAsset[]
  campaigns   CampaignContent[]
  comments    Comment[]
  activities  Activity[]
  notifications Notification[]
  contentPillar ContentPillar? @relation("ContentPillarRelation", fields: [pillarId], references: [id])
  analytics   ContentAnalytics[]
  workflowInstances WorkflowInstance[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("content")
}

model Asset {
  id          String    @id @default(cuid())
  name        String
  url         String
  type        String    @default("image")
  size        Int
  metadata    String?
  
  // Upload info
  uploadedById String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  
  // Relations
  contentAssets ContentAsset[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("assets")
}

model ContentAsset {
  id        String  @id @default(cuid())
  contentId String
  assetId   String
  
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  asset     Asset   @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  @@unique([contentId, assetId])
  @@map("content_assets")
}

model Campaign {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String    @default("draft")
  startDate   DateTime
  endDate     DateTime
  
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  
  // Relations
  content     CampaignContent[]
  analytics   CampaignAnalytics[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("campaigns")
}

model CampaignContent {
  id         String   @id @default(cuid())
  campaignId String
  contentId  String
  order      Int      @default(0)
  
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  content    Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, contentId])
  @@map("campaign_content")
}

model EmailSubscriber {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String?
  status      String    @default("active") // active, unsubscribed, bounced
  tags        String?   // JSON string of tags
  metadata    String?   // JSON string of additional data
  
  subscribedAt   DateTime  @default(now())
  unsubscribedAt DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  emailsSent     EmailCampaignRecipient[]
  
  @@map("email_subscribers")
}

model EmailCampaign {
  id          String    @id @default(cuid())
  name        String
  subject     String
  content     String    // HTML content
  plainText   String?   // Plain text version
  fromName    String
  fromEmail   String
  replyTo     String?
  
  status      String    @default("draft") // draft, scheduled, sending, sent, failed
  scheduledAt DateTime?
  sentAt      DateTime?
  
  // Stats
  totalRecipients Int      @default(0)
  sentCount       Int      @default(0)
  openCount       Int      @default(0)
  clickCount      Int      @default(0)
  bounceCount     Int      @default(0)
  unsubscribeCount Int     @default(0)
  
  // Metadata
  tags        String?   // JSON string of tags for filtering
  metadata    String?   // JSON string of campaign metadata
  
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  recipients  EmailCampaignRecipient[]
  
  @@map("email_campaigns")
}

model EmailCampaignRecipient {
  id            String    @id @default(cuid())
  campaignId    String
  subscriberId  String
  
  status        String    @default("pending") // pending, sent, opened, clicked, bounced, unsubscribed
  sentAt        DateTime?
  openedAt      DateTime?
  clickedAt     DateTime?
  bouncedAt     DateTime?
  unsubscribedAt DateTime?
  
  // Tracking
  openCount     Int       @default(0)
  clickCount    Int       @default(0)
  
  campaign      EmailCampaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  subscriber    EmailSubscriber  @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([campaignId, subscriberId])
  @@map("email_campaign_recipients")
}

model EmailTemplate {
  id          String    @id @default(cuid())
  name        String
  subject     String
  content     String    // HTML template with variables
  plainText   String?   // Plain text template
  category    String    @default("general") // newsletter, announcement, promotion, etc.
  
  variables   String?   // JSON string of available variables
  thumbnail   String?   // Preview image URL
  
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("email_templates")
}

model ContentTemplate {
  id          String    @id @default(cuid())
  name        String
  description String?
  content     String    // Template content with markdown
  category    String    @default("general") // blog, social, email, newsletter, etc.
  
  variables   String?   // JSON string of template variables
  thumbnail   String?   // Preview image URL
  
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("content_templates")
}

model Comment {
  id        String    @id @default(cuid())
  text      String
  contentId String
  content   Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([contentId, createdAt])
  @@index([userId])
  @@index([parentId])
  @@map("comments")
}

model Activity {
  id        String   @id @default(cuid())
  type      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  contentId String?
  content   Content? @relation(fields: [contentId], references: [id], onDelete: Cascade)
  details   String?
  createdAt DateTime @default(now())

  @@index([contentId, createdAt])
  @@index([userId, createdAt])
  @@index([type])
  @@map("activities")
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // MENTION, COMMENT, ASSIGNMENT, STATUS_CHANGE, DEADLINE
  message   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  contentId String?
  content   Content? @relation(fields: [contentId], references: [id], onDelete: Cascade)
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId, read, createdAt])
  @@index([contentId])
  @@map("notifications")
}

model BrandProfile {
  id          String    @id @default(cuid())
  name        String
  description String?
  
  // Brand Identity
  brandVoice  String?   // JSON: { tone, personality, style }
  brandValues String?   // JSON: array of brand values
  tagline     String?
  mission     String?
  vision      String?
  
  // Visual Identity
  colorPalette String?  // JSON: { primary, secondary, accent colors }
  typography   String?  // JSON: { fonts, sizes, styles }
  logoUrls     String?  // JSON: array of logo URLs
  
  // Content Guidelines
  contentGuidelines String? // Markdown content guidelines
  voiceExamples     String? // JSON: examples of brand voice
  
  // Target Audience
  targetAudience String? // JSON: personas and demographics
  
  isActive    Boolean   @default(true)
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  
  // Relations
  contentPillars ContentPillar[]
  brandAssets    BrandAsset[]
  contentExamples BrandContentExample[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("brand_profiles")
}

model ContentPillar {
  id          String    @id @default(cuid())
  name        String
  description String
  
  // Pillar Details
  keywords    String?   // JSON: array of keywords
  topics      String?   // JSON: array of topic areas
  toneGuide   String?   // Specific tone for this pillar
  examples    String?   // JSON: array of content examples
  
  // Content Strategy
  frequency   String?   // How often to post this pillar
  platforms   String?   // JSON: array of preferred platforms
  cta         String?   // Default call-to-action
  
  // Metrics
  performance String?   // JSON: performance metrics
  
  brandProfileId String
  brandProfile   BrandProfile @relation(fields: [brandProfileId], references: [id], onDelete: Cascade)
  
  // Relations with content
  content     Content[] @relation("ContentPillarRelation")
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("content_pillars")
}

model BrandAsset {
  id          String    @id @default(cuid())
  name        String
  category    String    // logo, template, graphic, document, guideline
  
  // Asset Details
  fileUrl     String
  thumbnail   String?
  fileType    String    // png, jpg, pdf, psd, ai, etc.
  fileSize    Int
  
  // Usage Guidelines
  usageRules  String?   // When and how to use this asset
  tags        String?   // JSON: array of tags for searchability
  
  // Version Control
  version     String    @default("1.0")
  isLatest    Boolean   @default(true)
  replacesId  String?   // Reference to previous version
  replaces    BrandAsset? @relation("AssetVersions", fields: [replacesId], references: [id])
  versions    BrandAsset[] @relation("AssetVersions")
  
  brandProfileId String
  brandProfile   BrandProfile @relation(fields: [brandProfileId], references: [id], onDelete: Cascade)
  
  uploadedById String
  uploadedBy   User       @relation(fields: [uploadedById], references: [id])
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("brand_assets")
}

model BrandContentExample {
  id          String    @id @default(cuid())
  title       String
  content     String    // Example content
  type        String    // post, email, ad, video_script, etc.
  platform    String?   // social platform if applicable
  
  // Analysis
  analysis    String?   // What makes this good brand content
  pillars     String?   // JSON: array of content pillar IDs this exemplifies
  
  // Metadata
  performance String?   // JSON: metrics if available
  tags        String?   // JSON: searchable tags
  
  brandProfileId String
  brandProfile   BrandProfile @relation(fields: [brandProfileId], references: [id], onDelete: Cascade)
  
  createdById String
  createdBy   User       @relation(fields: [createdById], references: [id])
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("brand_content_examples")
}

model ContentAnalytics {
  id        String   @id @default(cuid())
  contentId String
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  // Engagement metrics
  views     Int      @default(0)
  likes     Int      @default(0)
  shares    Int      @default(0)
  comments  Int      @default(0)
  clicks    Int      @default(0)
  
  // Platform-specific metrics
  platform  String   // instagram, facebook, twitter, linkedin, email, etc.
  reach     Int?     // How many unique users saw the content
  impressions Int?   // Total number of times content was displayed
  
  // Conversion metrics
  clickThroughRate Float? // CTR percentage
  engagementRate   Float? // Engagement rate percentage
  conversionRate   Float? // Conversion rate if applicable
  
  // Metadata
  metricDate DateTime @default(now()) // Date these metrics were recorded
  source     String?  // Where metrics came from (api, manual, etc.)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([contentId, metricDate])
  @@index([platform, metricDate])
  @@map("content_analytics")
}

model CampaignAnalytics {
  id         String   @id @default(cuid())
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  // Campaign performance
  totalReach       Int      @default(0)
  totalImpressions Int      @default(0)
  totalEngagements Int      @default(0)
  totalClicks      Int      @default(0)
  totalConversions Int      @default(0)
  
  // Financial metrics
  cost        Float?   // Campaign cost
  revenue     Float?   // Revenue generated
  roi         Float?   // Return on investment
  
  // Platform breakdown (JSON)
  platformMetrics String? // JSON object with per-platform stats
  
  // Time-based metrics
  metricDate DateTime @default(now())
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([campaignId, metricDate])
  @@map("campaign_analytics")
}

model UserEngagement {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // User activity tracking
  action      String   // view, like, share, comment, click, download, etc.
  entityType  String   // content, campaign, asset, etc.
  entityId    String   // ID of the content/campaign/asset
  
  // Context
  platform    String?  // Where the action occurred
  source      String?  // How they arrived (direct, search, social, etc.)
  userAgent   String?  // Browser/device info
  ipAddress   String?  // For geographic analytics
  
  // Session tracking
  sessionId   String?  // Group related actions
  duration    Int?     // Time spent (in seconds)
  
  timestamp   DateTime @default(now())

  @@index([userId, timestamp])
  @@index([entityType, entityId])
  @@index([action, timestamp])
  @@map("user_engagement")
}

model AnalyticsSnapshot {
  id          String   @id @default(cuid())
  
  // Snapshot metadata
  snapshotDate DateTime @default(now())
  period       String   // daily, weekly, monthly, yearly
  
  // Aggregated metrics
  totalContent      Int @default(0)
  publishedContent  Int @default(0)
  draftContent      Int @default(0)
  scheduledContent  Int @default(0)
  
  totalViews        Int @default(0)
  totalEngagements  Int @default(0)
  totalShares       Int @default(0)
  totalClicks       Int @default(0)
  
  // Platform breakdown (JSON)
  platformStats     String? // JSON object with platform-specific stats
  
  // Content pillar performance (JSON)
  pillarStats       String? // JSON object with pillar performance
  
  // Growth metrics
  newUsers          Int @default(0)
  activeUsers       Int @default(0)
  returningUsers    Int @default(0)
  
  createdAt DateTime @default(now())

  @@index([period, snapshotDate])
  @@map("analytics_snapshots")
}

// Workflow models for content approval and task management
model Workflow {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   // CONTENT_APPROVAL, TASK_SEQUENCE, CUSTOM
  status      String   @default("ACTIVE") // ACTIVE, INACTIVE, ARCHIVED
  
  // Configuration
  config      String?  // JSON configuration for workflow
  
  // Relations
  stages      WorkflowStage[]
  instances   WorkflowInstance[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("workflows")
}

model WorkflowStage {
  id          String   @id @default(cuid())
  workflowId  String
  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  name        String
  type        String   // APPROVAL, REVIEW, TASK, NOTIFICATION
  assignedTo  String?  // User role or specific user ID
  order       Int
  
  // Stage configuration
  config      String?  // JSON: timeout, auto-approve settings, etc.
  
  // Relations
  approvals   Approval[]
  tasks       Task[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([workflowId, order])
  @@map("workflow_stages")
}

model WorkflowInstance {
  id             String    @id @default(cuid())
  workflowId     String
  workflow       Workflow  @relation(fields: [workflowId], references: [id])
  
  // Instance state
  status         String    // PENDING, IN_PROGRESS, COMPLETED, REJECTED, CANCELLED
  currentStageId String?
  
  // Associated content
  contentId      String?
  content        Content?  @relation(fields: [contentId], references: [id], onDelete: SetNull)
  
  // Metadata
  startedBy      String    // User ID who initiated
  metadata       String?   // JSON: additional context
  
  // Timestamps
  startedAt      DateTime  @default(now())
  completedAt    DateTime?
  
  // Relations
  approvals      Approval[]
  tasks          Task[]
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  @@index([status, createdAt])
  @@index([contentId])
  @@map("workflow_instances")
}

model Approval {
  id                  String           @id @default(cuid())
  workflowInstanceId  String
  workflowInstance    WorkflowInstance @relation(fields: [workflowInstanceId], references: [id], onDelete: Cascade)
  
  stageId            String
  stage              WorkflowStage    @relation(fields: [stageId], references: [id])
  
  approvedById       String
  approvedBy         User             @relation(fields: [approvedById], references: [id])
  
  status             String           // APPROVED, REJECTED, PENDING
  comments           String?
  
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  
  @@index([workflowInstanceId, stageId])
  @@map("approvals")
}

model Task {
  id                  String           @id @default(cuid())
  workflowInstanceId  String?
  workflowInstance    WorkflowInstance? @relation(fields: [workflowInstanceId], references: [id], onDelete: Cascade)
  
  stageId            String?
  stage              WorkflowStage?    @relation(fields: [stageId], references: [id])
  
  // Task details
  title              String
  description        String?
  type               String            // REVIEW, WRITE, EDIT, PUBLISH, CUSTOM
  priority           String            @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  
  // Assignment
  assignedToId       String?
  assignedTo         User?             @relation(fields: [assignedToId], references: [id])
  
  // Status tracking
  status             String            @default("TODO") // TODO, IN_PROGRESS, DONE, BLOCKED
  
  // Dates
  dueDate            DateTime?
  completedAt        DateTime?
  
  // Metadata
  metadata           String?           // JSON: additional task data
  
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  
  @@index([assignedToId, status])
  @@index([status, dueDate])
  @@map("tasks")
}