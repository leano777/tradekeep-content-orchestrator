generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("EDITOR")
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  content Content[]
  campaigns Campaign[]
  assets Asset[]

  @@map("users")
}

model Content {
  id          String    @id @default(cuid())
  title       String
  body        String
  type        String    @default("post")
  status      String    @default("draft")
  pillar      String    @default("internal-os")
  platform    String?
  scheduledAt DateTime?
  publishedAt DateTime?
  
  // Author
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  
  // Relations
  assets      ContentAsset[]
  campaigns   CampaignContent[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("content")
}

model Asset {
  id          String    @id @default(cuid())
  name        String
  url         String
  type        String    @default("image")
  size        Int
  metadata    String?
  
  // Upload info
  uploadedById String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  
  // Relations
  contentAssets ContentAsset[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("assets")
}

model ContentAsset {
  id        String  @id @default(cuid())
  contentId String
  assetId   String
  
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  asset     Asset   @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  @@unique([contentId, assetId])
  @@map("content_assets")
}

model Campaign {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String    @default("draft")
  startDate   DateTime
  endDate     DateTime
  
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  
  // Relations
  content     CampaignContent[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("campaigns")
}

model CampaignContent {
  id         String   @id @default(cuid())
  campaignId String
  contentId  String
  order      Int      @default(0)
  
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  content    Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, contentId])
  @@map("campaign_content")
}