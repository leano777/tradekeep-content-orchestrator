name: Deploy TradeKeep CMS

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

env:
  NODE_VERSION: '20.x'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies - Server
        working-directory: ./server
        run: npm ci
      
      - name: Install dependencies - Client
        working-directory: ./client
        run: npm ci
      
      - name: Run linter - Server
        working-directory: ./server
        run: npm run lint || true
      
      - name: Run linter - Client
        working-directory: ./client
        run: npm run lint || true
      
      - name: Run tests - Server
        working-directory: ./server
        run: npm test || true
      
      - name: Run tests - Client
        working-directory: ./client
        run: npm test -- --passWithNoTests || true

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies - Server
        working-directory: ./server
        run: npm ci
      
      - name: Install dependencies - Client
        working-directory: ./client
        run: npm ci
      
      - name: Build Client
        working-directory: ./client
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.PRODUCTION_API_URL || 'http://localhost:9002' }}
      
      - name: Upload Client Build
        uses: actions/upload-artifact@v3
        with:
          name: client-build
          path: client/.next
      
      - name: Upload Server Files
        uses: actions/upload-artifact@v3
        with:
          name: server-files
          path: |
            server/
            !server/node_modules/
            !server/prisma/dev.db
            !server/.env

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
      
      # Deploy to Vercel (Frontend)
      - name: Deploy Frontend to Vercel
        if: env.VERCEL_TOKEN != ''
        run: |
          npm i -g vercel
          vercel --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      
      # Deploy to Railway/Render (Backend)
      # Uncomment and configure based on your deployment platform
      
      # For Railway:
      # - name: Deploy Backend to Railway
      #   uses: bervProject/railway-deploy@main
      #   with:
      #     railway_token: ${{ secrets.RAILWAY_TOKEN }}
      #     service: tradekeep-backend
      
      # For Render:
      # - name: Deploy Backend to Render
      #   env:
      #     RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      #     RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      #   run: |
      #     curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
      #       -H "Authorization: Bearer $RENDER_API_KEY" \
      #       -H "Content-Type: application/json" \
      #       -d '{"clearCache": false}'
      
      # For AWS EC2/ECS:
      # - name: Deploy to AWS
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-east-1
      
      - name: Deployment Status
        run: echo "Deployment completed successfully!"