'use client';\n\nimport { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { ThemeContextType } from '@/types';\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport function ThemeProvider({ children }: ThemeProviderProps) {\n  const [theme, setTheme] = useState<'dark' | 'light'>('dark');\n\n  useEffect(() => {\n    // Check for saved theme preference or default to 'dark'\n    const savedTheme = localStorage.getItem('theme') as 'dark' | 'light' | null;\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    \n    const initialTheme = savedTheme || (prefersDark ? 'dark' : 'light');\n    setTheme(initialTheme);\n    \n    // Apply theme to document\n    document.documentElement.classList.toggle('dark', initialTheme === 'dark');\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === 'dark' ? 'light' : 'dark';\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    document.documentElement.classList.toggle('dark', newTheme === 'dark');\n  };\n\n  const value: ThemeContextType = {\n    theme,\n    toggleTheme,\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme(): ThemeContextType {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}